package com.cobijo.oca.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlayerGameAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerGameAllPropertiesEquals(PlayerGame expected, PlayerGame actual) {
        assertPlayerGameAutoGeneratedPropertiesEquals(expected, actual);
        assertPlayerGameAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerGameAllUpdatablePropertiesEquals(PlayerGame expected, PlayerGame actual) {
        assertPlayerGameUpdatableFieldsEquals(expected, actual);
        assertPlayerGameUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerGameAutoGeneratedPropertiesEquals(PlayerGame expected, PlayerGame actual) {
        assertThat(expected)
            .as("Verify PlayerGame auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerGameUpdatableFieldsEquals(PlayerGame expected, PlayerGame actual) {
        assertThat(expected)
            .as("Verify PlayerGame relevant properties")
            .satisfies(e -> assertThat(e.getPosition()).as("check position").isEqualTo(actual.getPosition()))
            .satisfies(e -> assertThat(e.getOrder()).as("check order").isEqualTo(actual.getOrder()))
            .satisfies(e -> assertThat(e.getIsWinner()).as("check isWinner").isEqualTo(actual.getIsWinner()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlayerGameUpdatableRelationshipsEquals(PlayerGame expected, PlayerGame actual) {
        assertThat(expected)
            .as("Verify PlayerGame relationships")
            .satisfies(e -> assertThat(e.getGame()).as("check game").isEqualTo(actual.getGame()))
            .satisfies(e -> assertThat(e.getUserProfile()).as("check userProfile").isEqualTo(actual.getUserProfile()));
    }
}
